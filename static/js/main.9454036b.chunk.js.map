{"version":3,"sources":["component/Header.js","component/CreateToDo.js","component/ToDoList.js","component/ToDoBox.js","component/Footer.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBox","styled","div","_templateObject","Object","taggedTemplateLiteral","Header","react_default","a","createElement","ToDoFrom","CreateToDo_templateObject","CreateToDo","data","className","htmlFor","type","name","id","value","newTodoValue","onChange","event","handleOnChange","onClick","handleSubmit","Done","ToDoList_templateObject","ToDoList","key","todo","toggleTodoDone","checked","done","title","removeTodo","ToDoListBox","ToDoBox_templateObject","ToDoBox","todos","map","component_ToDoList","FooterBox","Footer_templateObject","Footer","App","_Component","inherits","_super","_createSuper","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","concat","state","newTodo","fetchTodos","axios","get","then","res","setState","objectSpread","target","preventDefault","post","headers","Content-Type","console","log","toConsumableArray","catch","error","status","patch","filter","item","delete","allDone","createClass","Fragment","component_Header","component_CreateToDo","component_ToDoBox","Btn","component_Footer","Component","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9454036b.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst HeaderBox = styled.div`\r\n\r\n`\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <HeaderBox>\r\n            <h1>\r\n              Wool's To Do Do Do &#x1F52B; \r\n            </h1>\r\n        </HeaderBox>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst ToDoFrom =styled.div`\r\n    width: 80%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    /* background-color: aqua; */\r\n\r\n    .to-do-from {\r\n        cursor: pointer;\r\n        display: flex;\r\n        width : 100%;\r\n        height: 100%;\r\n    }\r\n\r\n\r\n    .input {\r\n        width: 90%;\r\n    }\r\n\r\n    .button {\r\n        /* display: block; */\r\n        /* position: relative; */\r\n        /* float: left; */\r\n        border: 0ch;\r\n        cursor: pointer;\r\n        width: 120px;\r\n        padding: 0;\r\n        margin: 10px 20px 10px 0;\r\n        font-weight: 600;\r\n        text-align: center;\r\n        line-height: 50px;\r\n        color: #FFF;\r\n        border-radius: 5px;\r\n        transition: all 0.2s ;\r\n    }\r\n    .btnLightBlue {\r\n      background: #5DC8CD;\r\n    }\r\n    .btnLightBlue.btnPush {\r\n         box-shadow: 0px 5px 0px 0px #1E8185;\r\n    }\r\n    .btnPush:hover {\r\n        margin-top: 15px;\r\n        margin-bottom: 5px;\r\n    }\r\n    .btnLightBlue.btnPush:hover {\r\n  box-shadow: 0px 0px 0px 0px #1E8185;\r\n}\r\n`\r\n\r\nconst CreateToDo = (data) => {\r\n    // console.log(data)\r\n    return (\r\n        <ToDoFrom>\r\n            <from className='to-do-from'>\r\n                <div>\r\n                    <label htmlFor=\"\">오늘의 총알</label>\r\n                    <input \r\n                        className='input'\r\n                        type=\"text\"\r\n                        name='todo'\r\n                        id='todo'\r\n                        value={data.newTodoValue}\r\n                        onChange={(event) => data.handleOnChange(event)}\r\n                        />\r\n                </div>\r\n                <button \r\n                    className=\"button btnPush btnLightBlue\" \r\n                    type=\"submit\"\r\n                    onClick={(event) => data.handleSubmit(event)}\r\n                    >\r\n                        ToDo 장전\r\n                </button>\r\n            </from>\r\n        </ToDoFrom>\r\n    )\r\n}\r\n\r\nexport default CreateToDo;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst Done =styled.div `\r\n    .done {\r\n        color: gray;\r\n    }\r\n    .not-done {\r\n        color: black;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .delete-btn {\r\n        background-color: beige;\r\n        transition: all ease 0.3s 0s;\r\n        border: 0ch;\r\n        border-radius: 50%;\r\n    }\r\n    .delete-btn:hover {\r\n        background-color: pink;\r\n    }\r\n`\r\n\r\nconst ToDoList = (data) => {\r\n\r\n    return (\r\n        <Done>\r\n            <li key={data.todo.id}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={() => data.toggleTodoDone()}\r\n                    checked={data.todo.done}\r\n                    value={data.todo.id}\r\n                />\r\n                <span className={data.todo.done ? \"done\" : 'not-done'}>\r\n                    {data.todo.title}\r\n                </span>\r\n                <span className=\"delete-todo\">\r\n                    <button\r\n                        className=\"delete-btn\"\r\n                        onClick={(event) => data.removeTodo()}\r\n                    >\r\n                        &#x274E;\r\n                    </button>\r\n                </span>\r\n            </li>\r\n\r\n        </Done>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport ToDoList from './ToDoList';\r\n\r\nconst ToDoListBox = styled.div`\r\n    \r\n    .todo-ul {\r\n        list-style: none;\r\n        display: flex;\r\n        flex-flow: column;\r\n        align-items: baseline;\r\n    }\r\n`\r\n\r\nconst ToDoBox = (data) => {\r\n// console.log(data)\r\n    return (\r\n        <ToDoListBox>\r\n            <ul className='todo-ul' >\r\n                {data.todos.map((todo) => (\r\n\r\n                    <ToDoList\r\n                        key={todo.id}\r\n                        todo={todo}\r\n                        toggleTodoDone={() => data.toggleTodoDone(todo.id, todo.done)}\r\n                        removeTodo={() => data.removeTodo(todo.id)}\r\n                    />\r\n                ))\r\n                }\r\n            </ul>\r\n        </ToDoListBox>\r\n    )\r\n}\r\n\r\nexport default ToDoBox;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst FooterBox = styled.div`\r\n    width: 100%;\r\n    height: 20%;\r\n    position: absolute;  \r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: beige;\r\n\r\n    .textBox {\r\n        display: flex;\r\n        flex-flow: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n    .text {\r\n        margin: 10px;\r\n        color: blueviolet;\r\n        font-weight: 700;\r\n    }\r\n`\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <FooterBox>\r\n            <div className='textBox'>\r\n                <div className='text'>\r\n                    안녕하세요 여울의 투두두두 리스트입니다\r\n                    울면서 만들었습니다. &#x1F602;\r\n                </div>\r\n                <div className='text'>\r\n                    create 2022.10.18\r\n                </div>\r\n            </div>\r\n        </FooterBox>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n\nimport Header from './component/Header';\nimport CreateToDo from './component/CreateToDo';\nimport ToDoBox from './component/ToDoBox';\nimport Footer from './component/Footer';\n\nimport axios from 'axios'\n\n\n\nclass App extends Component {\n  \n  state = {\n    newTodo: '',\n    todos: [\n      {\n        id: '',\n        title: '',\n        done: false\n      }\n    ]\n  }\n\n  fetchTodos = () => {\n    axios.get(`http://localhost:3001/todos`)\n      .then(res => {\n        const todos = res.data;\n        // console.log(todos)\n        this.setState({\n          ...todos,\n          todos\n        });\n      })\n  }\n\n  componentDidMount() {\n    this.fetchTodos()\n  }\n\n  handleOnChange = (event) => {\n    // console.log(event.target.value)\n    this.setState({\n      newTodo: event.target.value,\n      // id: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n\n    axios.post(`http://localhost:3001/todos`, {\n      title: this.state.newTodo,\n      done: false\n    }\n    ,{headers: { \"Content-Type\": `application/json`}}\n    )\n      .then(res => {\n        console.log(res.data);\n        this.setState({\n          newTodo: '',\n          todos: [\n            ...this.state.todos,\n            {\n              title: res.data.title,\n              done: res.data.done,\n              id: res.data.id\n            }\n          ]\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  toggleTodoDone = (id, status) => {\n\n    axios.patch(`http://localhost:3001/todos/${id}`, {\n      done: !status\n    }).then(res => {\n      this.fetchTodos()\n    })\n\n  };\n\n  removeTodo = id => {\n    const todos = this.state.todos.filter(item => item.id !== id);\n    this.setState({ todos });\n\n    axios.delete(`http://localhost:3001/todos/${id}`)\n      .then(res => {\n        // console.log(res.data);\n\n      })\n  };\n\n  allDone = (event) => {\n    const todos = this.state.todos.map(todo => {\n      return {\n        ...todo,\n        done: true\n      }\n    })\n    this.setState({\n      todos\n    })\n  }\n\n  render() {\n    return (\n      <>\n      <div className=\"App\">\n        <header>\n          <Header/>\n        </header>\n        <div>\n        <CreateToDo\n          handleSubmit={this.handleSubmit}\n          handleOnChange={this.handleOnChange}\n          newTodoValue={this.state.newTodo}\n        />\n        <ToDoBox\n          todos={this.state.todos}\n          removeTodo={this.removeTodo}\n          toggleTodoDone={this.toggleTodoDone}\n        />\n        <Btn>\n          <button\n            className='button btnPush btnLightBlue'\n            onClick={this.allDone}  \n          >\n            사격 완료!\n          </button>\n        </Btn>\n        </div>\n        <footer>\n          <Footer/>\n        </footer>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n\nconst Btn = styled.div `\n    .button {\n        /* display: block; */\n        /* position: relative; */\n        /* float: left; */\n        border: 0ch;\n        cursor: pointer;\n        width: 120px;\n        padding: 0;\n        margin: 10px 20px 10px 0;\n        font-weight: 600;\n        text-align: center;\n        /* line-height: 50px; */\n        color: #FFF;\n        border-radius: 5px;\n        transition: all 0.2s ;\n    }\n    .btnLightBlue {\n      background: #5DC8CD;\n    }\n    .btnLightBlue.btnPush {\n         box-shadow: 0px 5px 0px 0px #1E8185;\n    }\n    .btnPush:hover {\n        margin-top: 15px;\n        margin-bottom: 5px;\n    }\n    .btnLightBlue.btnPush:hover {\n  box-shadow: 0px 0px 0px 0px #1E8185;\n}\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}